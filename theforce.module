<?php

/**
 * @file
 * Primarily Drupal hooks and global API functions to control The Force.
 *
 * This is the main module file for The Force.
 */

require_once dirname(__FILE__) . '/includes/theforce.ajax.inc';

/**
 * Implements hook_menu().
 */
function theforce_menu() {
  $items = array(
    'admin/config/user-interface/theforce' => array(
      'title' => t('The Force'),
      'description' => t('Controll and configure the Force'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('theforce_admin_form'),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/theforce.admin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/create' => array(
      'title' => t('Create an item of The Force'),
      'description' => t('Create a configurable plugin.'),
      'page callback' => 'theforce_admin_plugin_create',
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/create/%/%' => array(
      'title' => t('Create and activate an item of The Force'),
      'description' => t('Create a configurable plugin.'),
      'page callback' => 'theforce_admin_plugin_create_active',
      'page arguments' => array(6, 7),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/activate/%/%' => array(
      'title' => t('Activate an item of The Force'),
      'description' => t('Activate a plugin of a given type in a given region.'),
      'page callback' => 'theforce_admin_plugin_activate',
      'page arguments' => array(6, 7),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/settings/%theforce_plugin' => array(
      'title' => t('Plugin Settings'),
      'description' => t('Change a plugin\'s settings.'),
      'page callback' => 'theforce_admin_plugin_settings',
      'page arguments' => array(6),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/remove/%theforce_plugin' => array(
      'title' => t('Plugin Remove'),
      'description' => t('Remove a plugin from The Force'),
      'page callback' => 'theforce_admin_plugin_remove',
      'page arguments' => array(6),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/delete/%theforce_plugin' => array(
      'title' => t('Plugin Delete'),
      'description' => t('Delete a plugin from The Force'),
      'page callback' => 'theforce_admin_plugin_delete',
      'page arguments' => array(6),
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'admin/config/user-interface/theforce/plugin/weights' => array(
      'page callback' => 'theforce_admin_plugin_weights_save',
      'delivery callback' => 'ajax_deliver',
      'access callback' => 'user_access',
      'access arguments' => array('administer theforce'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.admin.plugin.inc',
    ),
    'system/theforce/html/%theforce_plugin' => array(
      'page callback' => 'theforce_html_ajax',
      'page arguments' => array(3),
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'theforce_plugin_access',
      'access arguments' => array(3),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.ajax.inc',
    ),
    'system/theforce/side/%theforce_plugin' => array(
      'page callback' => 'theforce_side_ajax',
      'page arguments' => array(3),
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'access callback' => 'theforce_plugin_access',
      'access arguments' => array(3),
      'type' => MENU_CALLBACK,
      'file' => 'includes/theforce.ajax.inc',
    ),
  );

  $items['admin/structure/menu/manage/%menu/add/ajax'] = array(
    'title' => 'Add menu link',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'theforce_admin_menu_add_item',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/theforce.admin.menu.inc',
  );

  $items['admin/structure/menu/manage/%menu/edit/ajax'] = array(
    'title' => 'Edit menu',
    'description' => t('Edit, add, reset and reorder menu items.'),
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'theforce_admin_menu_edit',
    'page arguments' => array(4),
    'access callback' => 'user_access',
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/theforce.admin.menu.inc',
  );
  $items['admin/structure/menu/item/%menu_link/edit/ajax'] = array(
    'title' => 'Edit menu link',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'theforce_admin_menu_edit_item',
    'page arguments' => array(4),
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/theforce.admin.menu.inc',
  );
  $items['admin/structure/menu/item/%menu_link/reset/ajax'] = array(
    'title' => 'Reset menu link',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'theforce_admin_menu_reset_item',
    'page arguments' => array(4),
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/theforce.admin.menu.inc',
  );
  $items['admin/structure/menu/item/%menu_link/delete/ajax'] = array(
    'title' => 'Delete menu link',
    'delivery callback' => 'ajax_deliver',
    'theme callback' => 'ajax_base_page_theme',
    'page callback' => 'theforce_admin_menu_delete_item',
    'page arguments' => array(4),
    'access arguments' => array('administer menu'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/theforce.admin.menu.inc',
  );

  if(module_exists('menu_admin_per_menu')){
    foreach($items as $key => &$item){
      if(strpos($key, 'admin/structure/menu/') !== false){
        $item['access callback'] = '_menu_admin_per_menu_menu_access';
        $item['access arguments'] = array(4);
      }
    }
  }

  return $items;
}

/**
 * Implements hook_theme().
 */
function theforce_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'theforce');
  $items['theforce'] = array(
    'variables' => array(
      'content' => array(),
      'region' => '',
      'locations' => array(),
    ),
    'template' => 'theforce',
    'path' => $path . '/theme',
    'file' => 'theforce.theme.inc',
  );
  $items['theforce_location'] = array(
    'variables' => array(
      'content' => array(),
      'region' => '',
      'location' => '',
      'attributes' => array(),
    ),
    'path' => $path . '/theme',
    'file' => 'theforce.theme.inc',
  );
  $items['theforce_item'] = array(
    'variables' => array('content' => array(), 'attributes' => array(), 'plugin' => ''),
    'path' => $path . '/theme',
    'file' => 'theforce.theme.inc',
  );
  $items['theforce_menu'] = array(
    'render element' => 'tree',
    'path' => $path . '/theme',
    'file' => 'theforce.theme.inc',
  );
  $items['theforce_menu_link'] = array(
    'render element' => 'element',
    'path' => $path . '/theme',
    'file' => 'theforce.theme.inc',
  );
  // $items['theforce_plugin_form'] = array(
  //   'render element' => 'element',
  //   'path' => $path . '/theme',
  //   'file' => 'theforce.theme.inc',
  // );
  return $items;
}

/**
 * Implements hook_library().
 */
function theforce_library(){
  $path = drupal_get_path('module', 'theforce');
  $libraries['theforce'] = array(
    'title' => 'The Force',
    'website' => 'https://github.com/jacerider/theforce',
    'version' => '7.x-1.x-dev',
    'js' => array(
      "$path/js/theforce.transition-last.js" => array(
        'group' => JS_DEFAULT,
        'every_page' => true
      ),
      "$path/js/theforce.js" => array(
        'group' => JS_DEFAULT,
        'every_page' => true
      ),
    ),
    'css' => array(
      "$path/css/theforce.scss" => array(
        'type' => 'file',
        'media' => 'screen',
        'group' => CSS_DEFAULT,
      ),
      "https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700" => array(
        'type' => 'external',
      ),
    ),
    'dependencies' => array(
      array('system', 'drupal.ajax'),
    ),
  );
  return $libraries;
}

/**
 * Plugin frontend access check.
 */
function theforce_plugin_access($plugin, $account = null){
  if(user_access('administer theforce', $account)){
    return true;
  }
  return true;
}

/**
 * A map of regions used for The Force.
 *
 * @param $region
 *   An optional region id. Will return the locations within that region if
 *   found.
 */
function theforce_regions($region = null){
  $regions = array(
    'top' => array('left','right'),
    'side' => array('top','bottom'),
  );
  if($region){
    return isset($regions[$region]) ? $regions[$region] : array();
  }
  return $regions;
}

/**
 * Implements hook_page_build()
 */
function theforce_page_build(&$page) {
  if (theforce_is_available()) {
    foreach(theforce_regions() as $region => $locations){
      $content = theforce_content($region);
      if(!empty($content)){
        $page['page_bottom']['theforce_' . $region] = $content;
      }
    }
    $page['page_bottom']['theforce_loader'] = array(
      '#markup' => '<div class="theforce-ui-loader"><img src="' . url(drupal_get_path('module', 'theforce')) . '/images/loader.svg" /></div>',
    );
  }
}

/**
 * Determine if a region should show even if it has no content.
 */
function theforce_region_show($region){
  $plugins = theforce_query()->filterActive()->loadHandler()->execute();
  foreach($plugins as $plugin){
    if(!empty($plugin['handler']->force[$region])){
      return true;
    }
  }
  return false;
}

/**
 * Generate content for a type.
 *
 * @param $region
 *   The region id you wish to generate content for.
 */
function theforce_content($region){
  $content = array();
  if($locations = theforce_regions($region)){
    foreach($locations as $location){
      $location_content = theforce_content_region($region, $location);
      if(!empty($location_content)){
        $content[$location] = $location_content;
      }
    }
    if(!empty($content) || theforce_region_show($region) || theforce_is_management()){
      $path = drupal_get_path('module', 'theforce');
      $settings = theforce_settings();
      $js_settings = array(
        'basePath' => current_path(),
        'modulePath' => $path,
        'isManagement' => theforce_is_management(),
        'topIconOnly' => $settings['top_icon_only'],
      );
      $content = array(
        '#theme' => 'theforce',
        '#region' => $region,
        '#locations' => $locations,
        '#content' => $content,
        '#attached' => array(
          'library' => array(array('theforce', 'theforce')),
          'js' => array(
            array('data' => array('theforce' => $js_settings), 'type' => 'setting'),
          ),
        ),
      );
    }
  }
  return $content;
}

/**
 * Generate region content of a bar.
 *
 * @param $region
 *   The region id you wish to generate content for.
 * @param $location
 *   The location id within the region you wish to generate content for.
 */
function theforce_content_region($region, $location){
  $plugins = theforce_query()->filterActive()->filterRegion($region)->filterLocation($location)->loadHandler()->execute();
  $content = array();
  foreach($plugins as $id => $plugin){
    if($plugin['handler']->access()){
      $plugin_content = $plugin['handler']->render();
      if(!empty($plugin_content)){
        $content['items'][$id] = array(
          '#theme' => 'theforce_item',
          '#plugin' => $plugin,
          '#content' => $plugin_content,
        );
      }
    }
  }
  if(!empty($content) || theforce_is_management()){
    $content['items'] = array(
      '#theme' => 'theforce_location',
      '#region' => $region,
      '#location' => $location,
      '#content' => $content,
      '#attributes' => array(
        'id' => "theforce-$region-$location-content",
      ),
    );
    if(theforce_is_management()){
      $content['items']['#attributes']['class'][] = 'theforce-ui-sort';
    }
  }
  return $content;
}

/**
 * Implements hook_preprocess_html().
 */
function theforce_preprocess_html(&$vars) {
  if (theforce_is_available()) {
    $vars['theforce'] = 0;
    $settings = theforce_settings();
    foreach(theforce_regions() as $region => $locations){
      if(!empty($vars['page']['page_bottom']['theforce_' . $region])){
        $vars['theforce'] = 1;
        $vars['classes_array'][] = 'theforce-' . $region . '-enabled';
        if(!empty($vars['page']['page_bottom']['theforce_' . $region]['#content'])){
          if(isset($settings[$region . '_style'])){
            $vars['classes_array'][] = 'theforce-' . $region . '-style-' . $settings[$region . '_style'];
          }
          $vars['classes_array'][] = 'theforce-' . $region . '-content';
        }
      }
    }
    if($vars['theforce']){
      $settings = theforce_settings();
      $vars['classes_array'][] = 'theforce-enabled';
      $vars['classes_array'][] = 'theforce-side-' . $settings['side_position'];
      if($settings['top_icon_only']){
        $vars['classes_array'][] = 'theforce-top-icon-only';
      }
      if(theforce_is_management()){
        $vars['classes_array'][] = 'theforce-side-active';
      }
    }
  }
}

/**
 * Implements hook_process_page().
 */
function theforce_process_page(&$vars){
  if(isset($_GET['theforce'])){
    // We don't want messages displayed in ajax refresh.
    unset($vars['messages']);
  }
}

/**
 * Implements hook_process_html().
 */
function theforce_process_html(&$vars){
  if(isset($_GET['theforce'])){
    $commands = array();
    $commands[] = ajax_command_replace('#theforce-content', '<div id="theforce-content">' . $vars['page'] . '</div>');
    print ajax_render($commands);
    drupal_exit();
  }
  if(!empty($vars['theforce'])){
    $vars['page'] = '<div id="theforce-wrap"><div id="theforce-content">' . $vars['page'] . '</div><!-- /#theforce-content --></div><!-- /#theforce-wrap -->';
  }
}

/**
 * Implements hook_user_insert().
 */
function theforce_user_insert(&$edit, $account, $category){
  // If we are using the theforce profile image, we need to set its title and owner
  // after the user is created.
  $wrapper = entity_metadata_wrapper('user', $account);
  if(isset($wrapper->field_image_theforce)){
    $theforce = $wrapper->field_image_theforce->value();
    $theforce->title = t('Profile image for !username', array('!username' => $account->name));
    $theforce->uid = $account->uid;
    $theforce->save();
  }
}

/**
 * Get settings.
 */
function theforce_settings(){
  $settings = &drupal_static(__FUNCTION__);
  if(!isset($settings)){
    $settings = drupal_array_merge_deep(theforce_settings_definition(), variable_get('theforce', array()));
  }
  return $settings;
}

/**
 * Set a specific setting.
 */
function theforce_setting_set($key, $value){
  $settings = theforce_settings();
  if(isset($settings[$key])){
    $settings[$key] = $value;
    variable_set('theforce', $settings);
  }
}

/**
 * The Force default settings.
 */
function theforce_settings_definition() {
  $defaults = &drupal_static(__FUNCTION__, array());
  if(empty($defaults)){
    $defaults = array(
      'menu' => '',
      'top_bg' => '#F1F3F4',
      'top_primary' => '#0997c3',
      'side_bg' => '#273035',
      'side_primary' => '#0997c3',
      'top_icon_only' => 1,
      'top_style' => 'outset',
      'side_position' => 'left',
      'side_style' => 'outset',
    );
  }
  return $defaults;
}

/**
 * Implements hook_sonar_var().
 */
function theforce_sonar_var(){
  $settings = theforce_settings();
  $defaults = array(
    'group' => CSS_DEFAULT,
    'every_page' => FALSE,
  );
  return array(
    'theforce-top-bg' => array(
      'value' => $settings['top_bg'],
    ) + $defaults,
    'theforce-top-primary' => array(
      'value' => $settings['top_primary'],
    ) + $defaults,
    'theforce-side-bg' => array(
      'value' => $settings['side_bg'],
    ) + $defaults,
    'theforce-side-primary' => array(
      'value' => $settings['side_primary'],
    ) + $defaults,
  );
}

/**
 * Prepare a configurable plugin id.
 */
function theforce_plugin_id_prepare($id){
  return 'theforcePadawan' . ucfirst($id);
}

/**
 * Wrapper to check whether various theforce features are accessible to the
 * current user and compatible with the current theme.
 */
function theforce_is_enabled() {
  global $theme_info;
  // If the theme does not specify some flag for this feature, assume
  // it is compatible.
  if (!isset($theme_info->info['theforce']) || $theme_info->info['theforce']) {
    return true;
  }
  return false;
}

/**
 * Helper for returning whether the Force toolbar should be displayed.
 */
function theforce_is_available() {
  if (theforce_is_enabled() && user_access('view theforce')) {
    return true;
  }
  return false;
}

/**
 * Check to see if current page is The Force admin page.
 */
function theforce_is_management() {
  static $is_management;
  if(!isset($is_management)){
    $is_management = arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'user-interface' && arg(3) == 'theforce' && !arg(4);
    if(!empty($_POST['form_id']) && substr($_POST['form_id'], 0, 8) == 'theforce'){
      $is_management = true;
    }
  }
  return $is_management;
}

/**
 * Implements hook_form_alter(). Alter user create/form.
 */
function theforce_form_alter(&$form, &$form_state, $form_id){
  if(in_array($form_id, array('user_profile_form','user_register_form'))){
    // Make sure user profile image is never required.
    if(isset($form['field_image_asset'])){
      $ief = &$form['field_image_asset'][$form['field_image_asset']['#language']]['form']['field_image'];
      $ief[$ief['#language']][0]['#required'] = 0;
    }
  }
}

/**
 * Implements hook_fawesome_icons().
 */
function theforce_fawesome_icons(){
  $icons = array(
    'theforce' => 'rebel',
    'the force' => 'rebel',
  );

  return $icons;
}


////////////////////////////////////////////////////////////////////////////////
// Access and Permissions
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_permission().
 */
function theforce_permission() {
  $permissions = array(
    'view theforce' => array(
      'title' => t('Use the Force'),
      'description' => t('Access the Force and all its glory'),
    ),
    'administer theforce' => array(
      'title' => t('Administer the Force'),
      'description' => t('Control the Force settings and configurations'),
    ),
  );
  // $plugins = theforce_query()->filterPublic()->execute();
  // foreach($plugins as $id => $plugin){
  //   $permissions['view ' . $id] = array(
  //     'title' => t('View %name', array('%name' => $plugin['title'])),
  //     'description' => t('View this plugin in all its glory'),
  //   );
  // }
  return $permissions;
}


////////////////////////////////////////////////////////////////////////////////
// Plugin CRUD
////////////////////////////////////////////////////////////////////////////////

/**
 * Create a plugin based on a master.
 */
function theforce_plugin_create($id, $title, $class, $settings = array()){
  if(!theforce_plugin_exists($id)){
    $data = array(
      'id' => $id,
      'title' => $title,
      'class' => $class,
      'settings' => array(),
    );
    if(!empty($settings) && is_array($settings)){
      $data['settings'] = $settings;
    }
    $data['settings'] = serialize($data['settings']);
    return db_merge('theforce_custom')->key(array('id' => $id))->fields($data)->execute();
  }
  else{
    drupal_set_message(t('A plugin with this id (%id) already exists.', array('%id' => $id)), 'error');
    return false;
  }
}

/**
 * Remove a plugin
 */
function theforce_plugin_delete($id){
  return db_delete('theforce_custom')->condition('id', $id)->execute();
}

/**
 * Check if plugin already exists with this id.
 *
 * @return [type]
 */
function theforce_plugin_exists($id){
  $id = theforce_plugin_id_prepare($id);
  $result = db_select('theforce_custom', 'f')
    ->fields('f', array('id'))
    ->condition('id', $id)
    ->range(0, 1)
    ->execute()
    ->rowCount();
  return !empty($result);
}

/**
 * Activate a new plugin.
 */
function theforce_plugin_activate($id, $region, $location, $weight = null, array $settings = array()){
  if(in_array($location, theforce_regions($region))){
    $data = array(
      'id' => $id,
      'region' => $region,
      'location' => $location,
      'settings' => array(),
    );
    if(isset($weight) && is_numeric($weight)){
      $data['weight'] = $weight;
    }
    else{
      $order_by = 'DESC';
      if($location == 'right'){
        $order_by = 'ASC';
      }
      $result = db_select('theforce_active', 'f')
        ->fields('f', array('weight'))
        ->condition('region', $region)
        ->condition('location', $location)
        ->orderBy('weight', $order_by)
        ->range(0, 1)
        ->execute()
        ->fetchAssoc();
      $weight = isset($result['weight']) ? $result['weight'] : 0;
      if($location == 'right'){
        $weight--;
      }
      else{
        $weight++;
      }
      $data['weight'] = $weight;
    }
    if(!empty($settings) && is_array($settings)){
      $data['settings'] = $settings;
    }
    $data['settings'] = serialize($data['settings']);
    return db_merge('theforce_active')->key(array('id' => $id))->fields($data)->execute();
  }
  else{
    drupal_set_message(t('The region %region does not contain a location named %location.', array('%region' => $region, '%location' => $location)), 'error');
    return false;
  }
}

/**
 * Update an active plugin.
 */
function theforce_plugin_update($id, $weight = null, $settings = null){
  $data = array();
  if(isset($weight) && is_numeric($weight)){
    $data['weight'] = $weight;
  }
  if(!is_null($settings) && is_array($settings)){
    $data['settings'] = serialize($settings);
  }
  db_update('theforce_active')->fields($data)->condition('id', $id)->execute();
}

/**
 * Update an active plugin.
 */
function theforce_plugin_weight_save($id, $weight){
  if(is_numeric($weight)){
    return db_update('theforce_active')->fields(array('weight' => $weight))->condition('id', $id)->execute();
  }
  return false;
}

/**
 * Remove a plugin
 */
function theforce_plugin_deactivate($id){
  return db_delete('theforce_active')->condition('id', $id)->execute();
}

/**
 * Create a query for available Force plugins.
 *
 * @param $type
 *   The type of plugin to query. (top or side)
 *
 * @return
 *   An array of matching plugins. When querying by filterId, the plugin will
 *   directly returned.
 */
function theforce_query(){
  return theforceQuery::query();
}


////////////////////////////////////////////////////////////////////////////////
// Ctools
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_ctools_plugin_type().
 *
 * Has plenty options. See ctools/help/plugins-creating.html
 */
function theforce_ctools_plugin_type() {
  return array(
    'jedi' => array(
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'master' => array(
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implementation of hook_theforce_jedi().
 *
 * This is a ctools plugins hook.
 */
function theforce_theforce_jedi(){
  module_load_include('inc', 'theforce', 'theforce.plugins');
  return _theforce_theforce_jedi();
}

/**
 * Implementation of hook_theforce_master().
 *
 * This is a ctools plugins hook.
 */
function theforce_theforce_master(){
  module_load_include('inc', 'theforce', 'theforce.plugins');
  return _theforce_theforce_master();
}

/**
 * Fetch metadata for one theforce plugin by the given name.
 */
function theforce_plugin_get($plugin) {
  ctools_include('plugins');
  if ($class = ctools_plugin_get_class($plugin, 'handler')) {
    // Check that class exists until CTools & registry issues are resolved.
    if (class_exists($class)) {
      $all_args = func_get_args();
      $args = array_slice($all_args, 2);
      // array_unshift($args, $plugins[$key]);
      return new $class($plugin, $args);
    }
  }
  return FALSE;
}

/**
 * A Drupal load handler for plugins.
 */
function theforce_plugin_load($id){
  return theforce_query()->returnOnEmpty(false)->filterActive()->filterId($id)->loadHandler()->execute();
}


////////////////////////////////////////////////////////////////////////////////
// Views
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_views_api().
 */
function theforce_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'theforce') . '/views',
  );
}


////////////////////////////////////////////////////////////////////////////////
// Features
////////////////////////////////////////////////////////////////////////////////

/**
 * Implementation of hook_features_api
 */
function theforce_features_api() {
  return array(
    'theforce' => array(
      'name' => 'The Force',
      'file' => drupal_get_path('module', 'theforce') .'/includes/theforce.features.inc',
      'feature_source' => TRUE,
      'default_hook' => 'theforce_items',
      'alter_hook' => 'theforce_items',
      // 'default_hook' => 'theforce_default_items',
      // 'default_file' => FEATURES_DEFAULTS_INCLUDED,
    ),
  );
}


////////////////////////////////////////////////////////////////////////////////
// Images
////////////////////////////////////////////////////////////////////////////////

/**
 * Implements hook_image_default_styles().
 */
function theforce_image_default_styles() {
  $styles = array();
  $styles['theforce-top'] = array(
    'label' => 'THE FORCE | Top',
    'effects' => array(
      array(
        'name' => 'image_scale_and_crop',
        'data' => array(
          'width' => 75,
          'height' => 75,
          'upscale' => TRUE,
        ),
        'weight' => 0,
      ),
    ),
  );
  return $styles;
}
